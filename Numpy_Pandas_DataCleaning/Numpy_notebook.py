# -*- coding: utf-8 -*-
"""2.1 Numpy Notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bL3pp54pHYc1hG28D-evGQWQjlrl7eAx

## **Numpy**

Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.

To use Numpy, we first need to import the `numpy` package:
"""

import numpy as np

"""## Creating a numpy array"""

# Create an Numpy array from python list
x = [1,2,3]
arr = np.array(x)
print(arr)

# Creating a Numpy array having dimension 2*3 using a 2 dimensional python list
arr = np.array([[1,2,3],[4,5,6]])
print(arr)

# Creating a Numpy array having dimension 2*3 using a python list and the reshape method
arr = np.array([1,2,3,4,5,6]).reshape(2,3)
print(arr)

# Creating a Numpy array of dimension 2*3 having all values set to 0
# Here the parameter passed to the zeros method is a tuple
arr = np.zeros((2,3))
print(arr)

# Creating a Numpy array of dimension 2*3 having all values set to 1
# Here the parameter passed to the ones method is a tuple
arr = np.ones((2,3))
print(arr)

# Creating a Numpy array of dimension 2*3 having random values
# Here the parameter is directly passed to the rand method (not as a tuple, like in 'ones' and 'zeros')
# np.random.seed(10)
# Uncomment the above line for consistent results. Seed ensures that you get
# the same result everytime you execute a random operation
arr = np.random.rand(2,3)
print(arr)

# creating Numpy array using a range operation similar to python 'range' method 
# np.arange(10) is same as np.arange(0,10)
arr = np.arange(10)
print(arr)

# trying to reshape into 3,3 which needs only 9 elements results in an error
# When reshaping total number of elements should be equal to elements required in reshaped array
#first trial will give an error, you know why?
#arr = np.arange(10).reshape(3,3)
#print(arr)
arr1 = np.arange(9).reshape(3,3)
print(arr1)

"""## Basic operations that uses broadcasting"""

# Multiplication by 2 - Multiplies each element in the array by 2
arr = np.arange(9).reshape(3,3)
result = arr * 2
print(arr)
print("-"*30) #Prints 30 '-' as a separator for arr and result value.
print(result)

# Multiplication by array having non similar dimension - Multiplies each element in the array by [2,3,5] based on the
# index of the element. ie: all elements in 1st column gets multiplied by 2, 2nd column elements gets multiplied by 3
# and elements in 3rd column gets multiplied by 5
arr = np.arange(9).reshape(3,3)
result = arr * [2,3,5]
print(arr)
print("-"*30) #Prints 30 '-' as a separator for arr and result value.
print(result)

# the same is true for all operations like addition, subtraction and division.
arr = np.arange(9).reshape(3,3)
result = arr + [2,3,5]
print(arr)
print("-"*30) #Prints 30 '-' as a separator for arr and result value.
print(result)

arr = np.arange(9).reshape(3,3)
result = arr - [2,3,5]
print(arr)
print("-"*30) #Prints 30 '-' as a separator for arr and result value.
print(result)

arr = np.arange(9).reshape(3,3)
result = arr / [2,3,5]
print(arr)
print("-"*30) #Prints 30 '-' as a separator for arr and result value.
print(result)
# Notice that here the output is



