# -*- coding: utf-8 -*-
"""2.2 Pandas - Heart Attack Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ONLhsBsMxEI02S6HFrknjxfyhokdS07U

#  **Pandas**
"""

# start with pandas
import pandas as pd

#read csv file
table = pd.read_csv("heart.csv")

table

"""# Display records, shapes and data types

**Display the shape and the size of the table**

* **shape**
"""

table.info()

table.shape

"""* **size:** total number of cells"""

table.size

"""* **number of samples in the dataset**"""

len(table)

"""* **print columns names**"""

table.columns    ## table.keys() gets the same result

table.keys()

"""* **print columns data types**"""

table.dtypes

table.head()

"""* **Display the last 3 records of the table**




"""

table.tail(3)

"""# Selection

* **Select the age column**
"""

table['age']

"""* **select the first 3 rows in the age column**"""

table['age'][:3]

table['age'][3:]

"""* **select age, fbs and target columns**"""

table[["age", 'fbs', 'target']]

"""#Differences between loc and iloc

The main distinction between loc and iloc is:
loc is label-based, which means that you have to specify rows and columns based on their row and column labels.
iloc is integer position-based, so you have to specify rows and columns by their integer position values (0-based integer position).

* **select age, fbs and target columns and rows from 10 to 15:** use both loc and iloc
"""

table.loc[10:15,["age", 'fbs', 'target']]
#table[["age", 'fbs', 'target']][10:15]

table[["age", 'fbs', 'target']][10:15]

table.iloc[10:15,[0, 5, 13]]



"""# Value counts

## Get the number of heart attack and non heart attack samples in the data
* **use value_counts()**
"""

table.target.value_counts()

table.sex.value_counts()

"""* **get their probabilites from the dataset**"""

table.target.value_counts()/len(table)

"""* ### get the probabilities of each gender of people with heart attack"""

table[table.target == 1].sex.value_counts()/len(table[table.target == 1])

### get the probabilities of heart vs no heart attack in the males



"""# Crosstab"""

pd.crosstab(table.sex, table.target,margins = True)

"""
* **rename target 1 to 'yes', and 0 to 'no'** 
* **rename gender 1 to 'male', and 0 to 'female'**
"""

#Solution 1
table['gender'] = table['sex'].map({1: 'Male', 0: 'Female'})
table['attack'] = table['target'].map({1:'Yes' ,0: 'No'})
gender_attack=pd.crosstab(table.gender, table.attack, margins = True)
gender_attack

#Solution 2
table['gender'] = table['sex'].map(lambda x: 'Male' if x==1 else 'Female')
table['attack'] = table['target'].map(lambda x: 'Yes' if x ==1 else 'No')
gender_attack = pd.crosstab(table.gender, table.attack, margins = True)
gender_attack

table

gender_attack.loc['Female','Yes']/gender_attack.loc['All','Yes']

gender_attack.iloc[0,1]/gender_attack.iloc[2,1]

"""* ## plot a stacked bar to visualize the gender vs attack"""

pd.crosstab(table.gender, table.attack).plot(kind = 'bar', stacked = True)

"""[Pandas Crosstab](https://pbpython.com/pandas-crosstab.html)"""

df = table[['age', 'target']][:3]
df

df.rename(columns = {'target':'heart_attack'})

df.T  ## transpose of the table

"""# Addition"""

df1 = table[['age', 'target']][:3]
df2 = table[['age', 'target']][3:5]

df1

df2

df1.append(df2)

df2

"""# Iteration / Sorting"""

for key in table:
    print(key)

table[['age', 'target']].sort_values(['target', 'age'])[:5]  ## sort by 'age' column

"""# from pandas to numpy"""

import numpy as np

age_cp = table[['age', 'cp']][:3].values

type(age_cp)

age_cp

table[['age', 'cp']][:3].values

#creating a random-numbers dataframe 
df2=pd.DataFrame(np.random.rand(3,3),index=['X','Y','Z'],columns=['C1','C2','C3'])
print(df2)